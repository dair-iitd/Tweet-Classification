import re 
import tweepy 
from tweepy import OAuthHandler 
from textblob import TextBlob 
import sys

#Comments
#add random fraction of non relevant sentences with negative sentiment
#hyperparameter search
#fine tune pretrained model for tweet encoding
#BERT model for tweet encoding
#test set consisting of kashmir tags
#add probability as feature vectors of bilstm encodings
#Ratio of 1:4 or 5 

# def clean_tweet(tweet): 
#     return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t]) |(\w+:\/\/\S+)", " ", tweet).split())   
# def get_tweet_sentiment(tweet): 
#     analysis = TextBlob(clean_tweet(tweet) )
#     if analysis.sentiment.polarity > 0: 
#         return 1
#     elif analysis.sentiment.polarity == 0: 
#         return 0
#     else: 
#         return -1
# f=open(sys.argv[1],"r")		#tweets
# # f1=open(sys.argv[2],"r")	#generated by sentiment
# f2=open(sys.argv[2],"r")	#manual label
# l1,l2=[],[]
# for line in f2:
# 	l2.append(int(line.split()[0]))
# # for line in f1:
# # 	l1.append(int(line.split()[0]))
# i,cp,cn,p,n=0,0,0,0,0
# for line in f:
# 	a=get_tweet_sentiment(line)
# 	if a==1:
# 		a=0
# 	else:
# 		a=1
# 	if a==1:
# 		p+=1
# 	if a==0:
# 		n+=1
# 	if a==1 and a==l2[i]:
# 		cp+=1
# 	if a==0 and a==l2[i]:
# 		cn+=1
# 	i+=1
# print("Pos ",p,"Neg ",n)
# print("Common Pos ",cp,"Common Neg ",cn)
def val(s):
	if s[0]=='0':
		return 0
	return 1
f1=open(sys.argv[1],"r")
f2=open(sys.argv[2],"r")
f=open(sys.argv[3],"r")
l=[]
for line in f:
	l.append(line)
l1,l2=[],[]
for line in f1:
	l1.append(line)
for line in f2:
	l2.append(line)
c=0
c1=0
conf=[[0,0],[0,0]]
f5=open("Correctpos.txt","w")
f6=open("Missedpos.txt","w")
f7=open("Incorrectpos.txt","w")
for i in range(len(l1)):
	if l1[i][0]=='1' and l2[i][0]=='0':
		f7.write(l[i])
	if l2[i][0]=='1':
		if l1[i][0]=='1':
			f5.write(l[i])
		else:
			f6.write(l[i])
	v1=val(l2[i])
	v2=val(l1[i])
	conf[v1][v2]+=1
p=1.0*conf[1][1]/(1.0*conf[0][1]+1.0*conf[1][1])
r=1.0*conf[1][1]/(1.0*conf[1][0]+1.0*conf[1][1])
print("Precision: "+str(p))
print("Recall: "+str(r))
print("F_score: "+str(2*p*r/(p+r)))
print("---------------------Confusion Matrix---------------------")
print(conf)
